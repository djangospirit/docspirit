==========================================
Créer des formulaires à partir des modèles
==========================================

.. module:: django.forms.models
   :synopsis: ModelForm and ModelFormset.

.. currentmodule:: django.forms

``ModelForm``
=============
.. class:: ModelForm

Si vous construisez une application orientée base de données, il y a des chances pour que vos formulaires soient très proches de vos modèles Django. Par exemple, vous pouvez avoir un modèle ``BlogComment``, et vous voudrez créer un formulaire qui permette aux internautes de laisser des commentaires. Il serait alors redondant de déclarer les champs de votre formulaire, puisque vous les avez déjà déclarés dans votre modèle.

Pour cette raison, Django fournit une classe d'assistance qui vous permet de créer une classe ``Form`` à partir d'un modèle Django.

Par exemple::

    >>> from django.forms import ModelForm

    # Créer la classe form.
    >>> class ArticleForm(ModelForm):
    ...     class Meta:
    ...         model = Article

    # Créer un formulaire pour ajouter un article.
    >>> form = ArticleForm()

    # Créer un formulaire pour modifier un article existant.
    >>> article = Article.objects.get(pk=1)
    >>> form = ArticleForm(instance=article)

Types de champs
---------------

La classé ``Form`` générée aura un champ de formulaire pour chaque champ du modèle. Chaque champ de modèle a son champ de formulaire correspondant. Par exemple, un ``CharField`` dans un modèle est représenté par un ``CharField`` dans le formulaire. Un champ ``ManyToManyField`` d'un modèle est représenté par un ``MultipleChoiceField``. Voici la liste complète des conversions:

===============================  ========================================
Champ de Modèle                  Champ de formulaire
===============================  ========================================
``AutoField``                    Non représenté dans le formulaire

``BigIntegerField``              ``IntegerField`` avec ``min_value`` 
                                 paramétré à -9223372036854775808 
                                 et ``max_value`` paramétré à
                                 9223372036854775807.

``BooleanField``                 ``BooleanField``

``CharField``                    ``CharField`` avec ``max_length``
                                 paramétré sur le champ de modèle
                                 ``max_length``

``CommaSeparatedIntegerField``   ``CharField``

``DateField``                    ``DateField``

``DateTimeField``                ``DateTimeField``

``DecimalField``                 ``DecimalField``

``EmailField``                   ``EmailField``

``FileField``                    ``FileField``

``FilePathField``                ``CharField``

``FloatField``                   ``FloatField``

``ForeignKey``                   ``ModelChoiceField`` (voir ci-dessous)

``ImageField``                   ``ImageField``

``IntegerField``                 ``IntegerField``

``IPAddressField``               ``IPAddressField``

``GenericIPAddressField``        ``GenericIPAddressField``

``ManyToManyField``              ``ModelMultipleChoiceField`` (voir 
                                 ci-dessous)

``NullBooleanField``             ``CharField``

``PhoneNumberField``             ``USPhoneNumberField``
                                 (de ``django.contrib.localflavor.us``)

``PositiveIntegerField``         ``IntegerField``

``PositiveSmallIntegerField``    ``IntegerField``

``SlugField``                    ``SlugField``

``SmallIntegerField``            ``IntegerField``

``TextField``                    ``CharField`` avec
                                 ``widget=forms.Textarea``

``TimeField``                    ``TimeField``

``URLField``                     ``URLField`` avec ``verify_exists`` 
                                 paramétré sur le champ de modèle
                                 ``verify_exists``
===============================  ========================================

.. versionadded:: 1.2
    ``BigIntegerField`` est nouveau dans Django 1.2.


Comme vous vous en doutez, les types de champs de modèle ``ForeignKey`` et ``ManyToManyField`` sont des cas particuliers:

* ``ForeignKey`` est représenté par ``django.forms.ModelChoiceField``,
  qui est un ``ChoiceField`` dont les choix est un modèle ``QuerySet``.

* ``ManyToManyField`` est représenté par 
  ``django.forms.ModelMultipleChoiceField``, qui est un
  ``MultipleChoiceField`` dont les choix est un modèle ``QuerySet``.

De plus, chaque champ du formulaire généré a des attributs paramétrés comme suit:

* Si le champ du modèle a ``blank=True``, alors le paramètre ``required`` du champ de formulaire est initialisé à
  ``False``. Sinon, ``required=True``.

* Le champ de formulaire ``label`` est initialisé avec le ``verbose_name`` du champ du modèle, son premier caractère en majuscule.

* Le champ de formulaire ``help_text`` est initialisé sur le ``help_text`` du champ du modèle.

* Si le champ du modèle a ``choices`` paramétré, le ``widget`` du champ du formulaire
  sera paramétré sur ``Select``, avec les choix fournis par le champ de modèle 
  ``choices``. Les choix comporteront normalement un choix vierge sélectionné par défaut. 
  Si le champ est requis, l'utilisateur devra faire une sélection.
  Le choix vierge ne sera pas inclus si le champ de modèle a 
  ``blank=False`` et une valeur ``default`` explicite (à la place, la valeur 
  ``default`` sera initialement sélectionnée).

Enfin, notez que vous pouvez surcharger le champ de formulaire d'un champ de modèle donné. Voir `Surcharger les types de champs ou les widgets par défaut`_ ci-dessous.

Un exemple complet
------------------

Etudions ces modèles::

    from django.db import models
    from django.forms import ModelForm

    TITLE_CHOICES = (
        ('MR', 'Mr.'),
        ('MRS', 'Mrs.'),
        ('MS', 'Ms.'),
    )

    class Author(models.Model):
        name = models.CharField(max_length=100)
        title = models.CharField(max_length=3, choices=TITLE_CHOICES)
        birth_date = models.DateField(blank=True, null=True)

        def __unicode__(self):
            return self.name

    class Book(models.Model):
        name = models.CharField(max_length=100)
        authors = models.ManyToManyField(Author)

    class AuthorForm(ModelForm):
        class Meta:
            model = Author

    class BookForm(ModelForm):
        class Meta:
            model = Book

Avec ces modèles, la sous-classe ``ModelForm`` sera grosso modo équivalente à ceci (la seule différence étant la méthode ``save()``, dont nous parlerons plus tard)::

    from django import forms

    class AuthorForm(forms.Form):
        name = forms.CharField(max_length=100)
        title = forms.CharField(max_length=3,
                    widget=forms.Select(choices=TITLE_CHOICES))
        birth_date = forms.DateField(required=False)

    class BookForm(forms.Form):
        name = forms.CharField(max_length=100)
        authors = forms.ModelMultipleChoiceField(queryset=Author.objects.all())

La méthode ``is_valid()`` et les ``errors``
-------------------------------------------

La première fois que vous appelez ``is_valid()`` ou que vous accèdez à l'attribut ``errors`` d'un 
``ModelForm`` cela déclenche la validation du formulaire  validation tout comme celle du modèle :ref:`model validation
<validating-objects>`. Ce qui a comme effet de bord de nettoyer le modèle passé au constructeur ``ModelForm``. Par exemple, appeler ``is_valid()`` sur votre formulaire convertira tout champ date de votre modèle en objets Date réels.


La méthode ``save()``
---------------------

Chaque formulaire produit par ``ModelForm`` a aussi une méthode ``save()``. Cette méthode crée et sauvegarde un objet base de données avec les données liées au formulaire. Une sous-classe de ``ModelForm`` peut prendre une instance de modèle existante en tant qu'argument mot-clé ``instance``; s'il est fourni, ``save()`` sauvegardera cette instance. S'il ne l'est pas ,
``save()`` créera une nouvelle instance du modèle spécifique::

    # Create a form instance from POST data.
    >>> f = ArticleForm(request.POST)

    # Save a new Article object from the form's data.
    >>> new_article = f.save()

    # Create a form to edit an existing Article.
    >>> a = Article.objects.get(pk=1)
    >>> f = ArticleForm(instance=a)
    >>> f.save()

    # Create a form to edit an existing Article, but use
    # POST data to populate the form.
    >>> a = Article.objects.get(pk=1)
    >>> f = ArticleForm(request.POST, instance=a)
    >>> f.save()

Notez que ``save()`` lèvera un ``ValueError`` si les données du formulaire ne valident pas -- par exemple, si form.errors donne True.

Cette méthode ``save()`` accepte un argument mot-clé ``commit`` facultatif , qui prend
soit ``True`` soit ``False``. Si vous appelez ``save()`` avec
``commit=False``, ``save()`` renverra un objet qui n'aura pas encore été sauvegardé dans la base de données.
Il vous appartient dans ce cas d'appeler le ``save()`` de l'instance modèle résultante.
Ce comportement est utile si vous voulez appliquer un traitement personnalisé sur l'objet avant de le sauvegarder, ou si vous voulez utiliser l'une 
:ref:`options de sauvegarde de modèle <ref-models-force-insert>` spécialisée. ``commit`` est ``True``
par défaut.

Un autre effet de bord de l'utilisation de ``commit=False`` est visible lorsque votre modèle a une relation Plusieurs-à-Plusieurs avec un autre modèle. Si votre modèle a une relation Plusieurs-à-Plusieurs et que vous spécifiez``commit=False`` lors de la sauvegarde d'un formulaire, Django ne sauvegarde pas immédiatement les données du formulaire pour la relation Plusieurs-à-Plusieurs. Parce qu'il est impossible de sauvegarder les données Plusieurs-à-Plusieurs d'une instance tant qu'elle n'existe pas dans la base de données.

Pour contourner ce problème, chaque fois que vous sauvegardez un formulaire en utilisant ``commit=False``,
Django ajoute une méthode ``save_m2m()`` à votre sous-classe ``ModelForm``. Après avoir manuellement sauvegardé l'instance produite par le formulaire, vous pouvez invoquer ``save_m2m()`` pour sauvegarder les données Plusieurs-à-Plusieurs du formulaire. Par exemple::

    # Create a form instance with POST data.
    >>> f = AuthorForm(request.POST)

    # Create, but don't save the new author instance.
    >>> new_author = f.save(commit=False)

    # Modify the author in some way.
    >>> new_author.some_field = 'some_value'

    # Save the new instance.
    >>> new_author.save()

    # Now, save the many-to-many data for the form.
    >>> f.save_m2m()

Appeler ``save_m2m()`` n'est obligatoire que si vous utilisez ``save(commit=False)``.
Lorsque vous utilisez un simple ``save()`` sur un formulaire, toutes les données -- y compris les Plusieurs-à-Plusieurs -- sont sauvegardées sans avoir besoin d'appels de méthodes supplémentaies.
Par exemple::

    # Create a form instance with POST data.
    >>> a = Author()
    >>> f = AuthorForm(request.POST, instance=a)

    # Create and save the new author instance. There's no need to do anything else.
    >>> new_author = f.save()

À part les méthodes ``save()`` et ``save_m2m()``, un ``ModelForm`` fonctionne exactement de la même façon que tout autre formulaire ``forms``. Par exemple, la méthode ``is_valid()`` est utilisée pour vérifier la validité, la méthode ``is_multipart()`` est utilisée pour déterminer si un formulaire demande un téléchargement de fichier en plusieurs parties (et donc si ``request.FILES`` doit être passé au formulaire), etc. Voir :ref:`binding-uploaded-files` pour plus d'informations.

_`N'utiliser qu'une partie des champs dans un formulaire`
---------------------------------------------------------

Parfois, vous ne voudrez pas utiliser tous les champs du modèle dans le formulaire généré. Il y a trois façons de dire à  ``ModelForm`` de n'utiliser qu'une partie des champs du modèle:

1. Paramétrer ``editable=False`` sur le champ du modèle. Ainsi *n'importe quel* formulaire
   créé à partir du modèle via ``ModelForm`` n'incluera pas ce champ.

2. Utiliser l'attribut ``fields`` de la class ``Meta`` du ``ModelForm``.
   Cet attribut, s'il est utilisé, contiendra une liste des champs devant figurer dans le formulaire. L'ordre dans lequel   
   apparaissent les noms des champs sera celui utilisé pour produire le formulaire.

3. Utiliser l'attribut ``exclude`` de la class ``Meta`` du ``ModelForm``.
   Cet attribut, s'il est utilisé, contiendra une liste des champs à exclure du formulaire.

Par exemple, si vous voulez un formulaire pour le modèle ``Author`` (décrit plus haut) qui ne contient que les champs ``name`` et ``title``, vous renseignerez ``fields`` ou ``exclude`` comme ceci::

    class PartialAuthorForm(ModelForm):
        class Meta:
            model = Author
            fields = ('name', 'title')

    class PartialAuthorForm(ModelForm):
        class Meta:
            model = Author
            exclude = ('birth_date',)

Puisque le modèle Author n'a que 3 champs, 'name', 'title', et
'birth_date', les formulaires de cet exemple contiendront exactement les mêmes champs.

.. note::

    Si vous renseignez ``fields`` ou ``exclude`` lors de la création du 
    formulaire avec ``ModelForm``, les champs qui ne figureront pas dans
    le formulaire ne seront pas initialisés par la méthode ``save()`` du
    formulaire. De même, si vous ajoutez ensuite les champs exlcus au formulaire, 
    ils ne seront pas initialisés à partir de l'instance du modèle..

    Django empêchera toute tentative de sauvegarde d'un modèle incomplet,
    ainsi, si le modèle ne permet pas que les champs manquants soient vides, 
    et s'il ne fournit pas une valeur par défaut pour les champs manquants, 
    toute tentative de ``save()`` pour un ``ModelForm`` avec des champs manquants échouera. 
    Pour éviter cela, vous devez instancier votre modèle avec des valeurs initiales pour les
    champs manquants requis::

        author = Author(title='Mr')
        form = PartialAuthorForm(request.POST, instance=author)
        form.save()

    Sinon, vous pouvez utiliser ``save(commit=False)`` et renseigner à la main
    les champs requis::

        form = PartialAuthorForm(request.POST)
        author = form.save(commit=False)
        author.title = 'Mr'
        author.save()

    Voir la `section sur la sauvegarde des formulaires`_ pour plus de détails sur l'utilisation de ``save(commit=False)``.

.. _section sur la sauvegarde des formulaires: `La méthode save()`_

Surcharger les types de champs ou les widgets par défaut
--------------------------------------------------------

.. versionadded:: 1.2
    L'attribut ``widgets`` est nouveau dans Django 1.2.

Les types de champs par défaut, décrits dans le tableau `Types de champs`_ précédent, sont 
pratiques par défaut. Si vous avez un ``DateField`` dans votre modèle, il y a des chances que vous vouliez le représenter par un ``DateField`` dans votre formulaire. Mais ``ModelForm`` vous apporte la souplesse de pouvoir modifier le type de champ et le widget d'un champ de modèle donné.

Pour spécifier un widget personnalisé pour un champ, utilisez l'attribut ``widgets`` de la classe ``Meta`` interne. C'est un dictionnaire cartographiant les noms de champs et les classes ou instances de widget.

Par exemple, si vous voulez que le ``CharField`` de l'attribut ``name`` de ``Author`` soit représenté par un ``<textarea>`` à la place du ``<input type="text">`` par défaut, vous pouvez surcharger le widget du champ::

    from django.forms import ModelForm, Textarea

    class AuthorForm(ModelForm):
        class Meta:
            model = Author
            fields = ('name', 'title', 'birth_date')
            widgets = {
                'name': Textarea(attrs={'cols': 80, 'rows': 20}),
            }

Le dictionnaire ``widgets`` accepte soit des instances widget (par exemeple,
``Textarea(...)``) ou des classes (par exemeple, ``Textarea``).

Si vous voulez personnaliser davantage le champ -- en ajoutant son type, son label, etc. --
vous pouvez le faire en déclarant les champs comme vous le feriez dans un ``Form`` ordinaire. Les champs déclarés surchargeront ceux générés par défaut en utilisant l'attribut ``model``.

Par exemple, si vous voulez utiliser ``MyDateFormField`` pour le champ ``pub_date``, vous pouvez faire ceci::

    class ArticleForm(ModelForm):
        pub_date = MyDateFormField()

        class Meta:
            model = Article

Si vous voulez surcharger le label par défaut, spécifiez le paramètre ``label``
lors de la déclaration du champ de formulaire::

   >>> class ArticleForm(ModelForm):
   ...     pub_date = DateField(label='Publication date')
   ...
   ...     class Meta:
   ...         model = Article

.. note::

    Si vous instanciez explicitement un champ de formulaire de cette façon, 
    Django suppose que vous vous voulez complètement définir son comportement; 
    les attributs par défaut (comme
    ``max_length`` ou ``required``) ne sont donc pas dessinés à partir du modèle
    correspondant. Si vous voulez conserver le comportement spécifié dans le modèle, 
    vous devez paramétrer les arguments pertinents lors de la déclaration du champ 
    de formulaire.

    Par exemple, si le modèle ``Article`` ressemble à ça::

        class Article(models.Model):
            headline = models.CharField(max_length=200, null=True, blank=True,
                                        help_text="Use puns liberally")
            content = models.TextField()

    et que vous voulez une validation personnalisée pour ``headline``, tout en conservant 
    les valeurs ``blank`` et ``help_text`` spécifiées, vous définirez ``ArticleForm`` comme ça::

        class ArticleForm(ModelForm):
            headline = MyFormField(max_length=200, required=False,
                                   help_text="Use puns liberally")

            class Meta:
                model = Article

    Vous devez vous assurer que le type du champ du formulaire peut être utilisé pour 
    paramétrer les contenus du champ modèle correspondant. S'ils ne sont pas compatibles,
    vous aurez une ``ValueError`` car il n'y a pas de conversion implicite.

    Voir la :doc:`documentation Champs de formulaire</ref/forms/fields>` pour plus d'informations
    sur les champs et leurs arguments.

Modifier l'ordre des champs
---------------------------

Par défaut, un ``ModelForm`` affichera les champs dans l'ordre dans lequel ils sont déclarés dans votre modèle, avec les instances ``ManyToManyField`` apparaissant en dernier. Si vous voulez modifier cet ordre, vous utiliserez l'attribut ``fields`` de la classe ``Meta``.

Les attributs ``fields`` définissent les sous-ensembles de champs modèles affichés et l'ordre dans lequel il seront affichés. Par exemple, avec ce modèle::

    class Book(models.Model):
        author = models.ForeignKey(Author)
        title = models.CharField(max_length=100)

le champ ``author`` sera affiché en premier. Pour que le champ ``title`` apparaisse en premier, vous spécifierez ce ``ModelForm``::

    >>> class BookForm(ModelForm):
    ...     class Meta:
    ...         model = Book
    ...         fields = ('title', 'author')

.. _overriding-modelform-clean-method:

Surcharger la méthode clean()
-----------------------------

Vous pouvez surcharger la méthode ``clean()`` d'un model form pour ajouter des validation, de la même façon que vous le feriez pour un formulaire normal.

Pour cela, comparées aux formulaires, les model forms ont deux caractéristiques spécifiques:

Par défaut, la méthode ``clean()`` valide l'unicité des champs marqués comme ``unique``, ``unique_together`` ou ``unique_for_date|month|year`` dans le modèle. Donc, si vous voulez surcharger la méthode ``clean()`` et conserver la validation par défaut, vous devez appeler la méthode ``clean()`` de la classe parent.

De même, une instance model form liée à un objet modèle contiendra un attribut ``self.instance`` qui donne des méthodes d'accès model form à cette instance de modèle spécifique.

Héritage de Form
----------------

Comme avec les modèles basiques, vous pouvez étendre et réutiliser ``ModelForms`` en en héritant. C'est utile si vous déclarez des champs ou des méthodes supplémentaies sur une classe parent pour utilisation dans plusieurs formulaires dérivés des modèles. Par exemple, en utilsant la classe ``ArticleForm`` vue plus haut::

    >>> class EnhancedArticleForm(ArticleForm):
    ...     def clean_pub_date(self):
    ...         ...

Cela crée un formulaire qui se comporte exactement comme ``ArticleForm``, sauf qu'il y a en plus de la validation et du nettoyage pour le champ ``pub_date``.

Vous pouvez aussi subclasser la classe ``Meta`` interne du parent si vous voulez modifier les listes ``Meta.fields`` ou ``Meta.excludes``::

    >>> class RestrictedArticleForm(EnhancedArticleForm):
    ...     class Meta(ArticleForm.Meta):
    ...         exclude = ('body',)

Là, on ajoute une méthode sur ``EnhancedArticleForm`` et on modifie l'``ArticleForm.Meta`` original pour enlever un champ.

Il y a cependant quelques points à noter:

* Les règles normales de résolution de nom Python s'appliquent. Si vous avez
  plusieurs classes de base qui déclarent une classe interne ``Meta``, 
  seule la première sera utilisée. C'est à dire le ``Meta`` enfant 
  s'il existe, sinon le ``Meta`` du premier parent, etc.

* Pour des raisons techniques, une sous-classe n'hérite pas à la fois d'un ``ModelForm``
  et d'un ``Form``.

Il y a des chances que ces remarques ne vous concernent pas, à moins que vous ne fassiez quelque chose de délicat avec le subclassing.

Intéraction avec la validation modèle
-------------------------------------

Comme étape de son traitement de validation, ``ModelForm`` appellera la méthode ``clean()``
pour chaque champ de votre *modèle* qui a un champ correspondant dans votre *formulaire*.
Si vous avez exclu des champs du modèle, la validation ne sera pas exécutée sur ces champs.
Voir la doc :doc:`validation de formulaire </ref/forms/validation>` 
pour plus d'infos sur le fonctionnenemt de la validation et le nettoyage de champs.
De même, votre méthode ``clean()`` du modèle ne sera pas appelée avant que les contrôles d'unicité ne soient faits. Voir
:ref:`Valider des objets <validating-objects>` pour plus d'informations sur le hook ``clean()`` du modèle.

.. _model-formsets:

Formsets de Modèle
==================

Comme pour les :doc:`formsets ordinaires </topics/forms/formsets>`, Django fournit quelques classes de formset amélioré qui facilitent le travail avec les modèles Django. Réutilisons le modèle ``Author``::

    >>> from django.forms.models import modelformset_factory
    >>> AuthorFormSet = modelformset_factory(Author)

Cela créera un formset capable de travailler avec les données associées au modèle ``Author``. Ça marche comme un formset habituel::

    >>> formset = AuthorFormSet()
    >>> print formset
    <input type="hidden" name="form-TOTAL_FORMS" value="1" id="id_form-TOTAL_FORMS" /><input type="hidden" name="form-INITIAL_FORMS" value="0" id="id_form-INITIAL_FORMS" /><input type="hidden" name="form-MAX_NUM_FORMS" id="id_form-MAX_NUM_FORMS" />
    <tr><th><label for="id_form-0-name">Name:</label></th><td><input id="id_form-0-name" type="text" name="form-0-name" maxlength="100" /></td></tr>
    <tr><th><label for="id_form-0-title">Title:</label></th><td><select name="form-0-title" id="id_form-0-title">
    <option value="" selected="selected">---------</option>
    <option value="MR">Mr.</option>
    <option value="MRS">Mrs.</option>
    <option value="MS">Ms.</option>
    </select></td></tr>
    <tr><th><label for="id_form-0-birth_date">Birth date:</label></th><td><input type="text" name="form-0-birth_date" id="id_form-0-birth_date" /><input type="hidden" name="form-0-id" id="id_form-0-id" /></td></tr>

.. note::
    ``modelformset_factory`` utilise ``formset_factory`` pour générer les formsets.
    Cela veut dire qu'un formset de modèle est juste une extension d'un formset basique
    qui sait comment intéragir avec un modèle en particulier.

Modifier le queryset
--------------------

Par défaut, lorsque vous créez un formset à partir d'un modèle, le formset utilisera un
queryset qui comporte tous les objets du modèle (par exemple,
``Author.objects.all()``). Vous pouvez surcharger ce comportement en utilsant l'argument ``queryset``::

    >>> formset = AuthorFormSet(queryset=Author.objects.filter(name__startswith='O'))

Alternativement, vous pouvez créer une sous-classe qui paramètre ``self.queryset`` dans ``__init__``::

    from django.forms.models import BaseModelFormSet

    class BaseAuthorFormSet(BaseModelFormSet):
        def __init__(self, *args, **kwargs):
            super(BaseAuthorFormSet, self).__init__(*args, **kwargs)
            self.queryset = Author.objects.filter(name__startswith='O')

Ensuite, vous passez votre classe ``BaseAuthorFormSet`` à la fonction factory::

    >>> AuthorFormSet = modelformset_factory(Author, formset=BaseAuthorFormSet)

Si vous voulez renvoyer une formset qui n'inclut aucune instance du modèle pré-existante, spécifiez un QuerySet vide::

   >>> AuthorFormSet(queryset=Author.objects.none())


Contrôler quels champs sont utilisés avec ``fields`` et ``exclude``
-------------------------------------------------------------------

Par défaut, un formset de modèle utilise tous les champs du modèle qui ne sont pas marqués avec ``editable=False``. Cependant, cela peut être surchargé au niveau du formset::

    >>> AuthorFormSet = modelformset_factory(Author, fields=('name', 'title'))

Utiliser ``fields`` limite le formset à n'utiliser que les champs indiqués. Alternativement, vous pouvez employer une approche "opt-out", en spécifiant les champs à exclure::

    >>> AuthorFormSet = modelformset_factory(Author, exclude=('birth_date',))

Fournir des données initiales
-----------------------------

.. versionadded:: 1.4

Comme avec les formsets normaux, il est possible :ref:`d'indiquer les données initiales
<formsets-initial-data>` pour les formulaires du formset en spécifiant un paramètre ``initial``
lors de l'instanciation du formset modèle renvoyé par
``modelformset_factory``. Cependant, avec les formsets modèle, les valeurs initiales ne s'appliquent qu'aux formulaires supplémentaires, ceux qui ne sont pas liés à une instance objet existante.

.. _saving-objects-in-the-formset:

Sauvegarder les objets du formset
---------------------------------

Comme avec un ``ModelForm``, vous pouvez sauvegarder les données en tant qu'objet modèle. Cela se fait avec la méthode ``save()`` du formset::

    # Create a formset instance with POST data.
    >>> formset = AuthorFormSet(request.POST)

    # Assuming all is valid, save the data.
    >>> instances = formset.save()

La méthode ``save()`` renvoie les instances qui ont été sauvegardées dans la base de données. Si les données d'une instance ne sont pas modifiées dans les données liées (celles du formulaire), l'instance ne sera pas sauvegardée dans la base de données et ne sera pas incluse dans la valeur renvoyée (``instances``, dans l'exemple ci-dessus).

Lorsqu'il y a des champs manquants dans le formulaire (parce qu'ils ont été exclus, par exemple), ces champs ne seront pas touchés par la méthode ``save()``. Vous trouverez plus d'information sur cette restriction, qui joue aussi pour les ``ModelForms`` ordinaires, dans `N'utiliser qu'une partie des champs dans un formulaire`_.

Passez ``commit=False`` pour retourner les instances de modèles non sauvegardées::

    # don't save to the database
    >>> instances = formset.save(commit=False)
    >>> for instance in instances:
    ...     # do something with instance
    ...     instance.save()

Cela vous permet d'attacher des données aux instances avant de les sauvegarder dans la base de données. Si votre formset contient un ``ManyToManyField``, vous devrez aussi appeler ``formset.save_m2m()`` pour vous assurer que les relations Plusieurs-à-Plusieurs sont sauvegardées correctement.

.. _model-formsets-max-num:

Limiter le nombre d'objets éditables
------------------------------------

.. versionchanged:: 1.2 

Comme avec les formsets ordinaires, vous pouvez utiliser les paramètres ``max_num`` et ``extra`` avec
``modelformset_factory`` pour limiter le nombre de formulaires supplémentaires affichés.

``max_num`` n'empêche pas l'affichage des objets existants::

    >>> Author.objects.order_by('name')
    [<Author: Charles Baudelaire>, <Author: Paul Verlaine>, <Author: Walt Whitman>]

    >>> AuthorFormSet = modelformset_factory(Author, max_num=1)
    >>> formset = AuthorFormSet(queryset=Author.objects.order_by('name'))
    >>> [x.name for x in formset.get_queryset()]
    [u'Charles Baudelaire', u'Paul Verlaine', u'Walt Whitman']

Si la valeur de ``max_num`` est supérieure au nombre d'objets liés existants, des formulaires vierges supplémentaires seront ajoutés au formset, à concurrence de ``max_num`` et tant que le nombre de formulaires n'excède pas ``max_num``::

    >>> AuthorFormSet = modelformset_factory(Author, max_num=4, extra=2)
    >>> formset = AuthorFormSet(queryset=Author.objects.order_by('name'))
    >>> for form in formset:
    ...     print form.as_table()
    <tr><th><label for="id_form-0-name">Name:</label></th><td><input id="id_form-0-name" type="text" name="form-0-name" value="Charles Baudelaire" maxlength="100" /><input type="hidden" name="form-0-id" value="1" id="id_form-0-id" /></td></tr>
    <tr><th><label for="id_form-1-name">Name:</label></th><td><input id="id_form-1-name" type="text" name="form-1-name" value="Paul Verlaine" maxlength="100" /><input type="hidden" name="form-1-id" value="3" id="id_form-1-id" /></td></tr>
    <tr><th><label for="id_form-2-name">Name:</label></th><td><input id="id_form-2-name" type="text" name="form-2-name" value="Walt Whitman" maxlength="100" /><input type="hidden" name="form-2-id" value="2" id="id_form-2-id" /></td></tr>
    <tr><th><label for="id_form-3-name">Name:</label></th><td><input id="id_form-3-name" type="text" name="form-3-name" maxlength="100" /><input type="hidden" name="form-3-id" id="id_form-3-id" /></td></tr>

.. versionchanged:: 1.2

Une valeur de ``max_num`` égale à ``None`` (par défaut) enlève toute limite au nombre de formulaires affichés.

Utiliser un formset de modèle dans une vue
------------------------------------------

Les formsets de modèles sont très semblables aux formsets. Supposons que nous voulons un formset pour éditer les instances de modèle ``Author``::

    def manage_authors(request):
        AuthorFormSet = modelformset_factory(Author)
        if request.method == 'POST':
            formset = AuthorFormSet(request.POST, request.FILES)
            if formset.is_valid():
                formset.save()
                # do something.
        else:
            formset = AuthorFormSet()
        return render_to_response("manage_authors.html", {
            "formset": formset,
        })

Comme vous pouvez le voir, la logique de la vue d'un formset de modèle n'est pas si différente de celle d'un formset "normal". La seule différence est que nous appelons ``formset.save()`` pour sauvegarder les données dans le base de données. (Comme décrit précédemment dans :ref:`saving-objects-in-the-formset`.)

Surcharger ``clean()`` d'un ``model_formset``
--------------------------------------------

Comme avec ``ModelForms``, la méthode ``clean()`` d'un ``model_formset``, par défaut, validera qu'aucun des éléments du formset ne viole la contrainte d'unicité de votre modèle (soit ``unique``, ``unique_together`` ou
``unique_for_date|month|year``).  Si vous voulez surcharger la méthode ``clean()`` d'un ``model_formset`` et conserver cette validation, vous devez appelr la méthode ``clean`` de la classe parent::

    class MyModelFormSet(BaseModelFormSet):
        def clean(self):
            super(MyModelFormSet, self).clean()
            # example custom validation across forms in the formset:
            for form in self.forms:
                # your custom formset validation

Utiliser un queryset personnalisé
---------------------------------

Comme indiqué précédemment, vous pouvez surcharger le queryset par défaut utilisé dans le formset model::

    def manage_authors(request):
        AuthorFormSet = modelformset_factory(Author)
        if request.method == "POST":
            formset = AuthorFormSet(request.POST, request.FILES,
                                    queryset=Author.objects.filter(name__startswith='O'))
            if formset.is_valid():
                formset.save()
                # Do something.
        else:
            formset = AuthorFormSet(queryset=Author.objects.filter(name__startswith='O'))
        return render_to_response("manage_authors.html", {
            "formset": formset,
        })

Notez que nous passons l'argument ``queryset`` dans les deux ``POST`` et ``GET`` de cet exemple.

Utiliser le formset dans le template
------------------------------------

.. highlight:: html+django

Il y a trois façons de mettre en forme un formset dans un template Django.

Première façon, vous pouvez laisser le formset faire le gros du travail::

    <form method="post" action="">
        {{ formset }}
    </form>

Deuxième façon, vous pouvez mettre en forme le formset manuellement, mais laisser le formulaire se charger de lui-même::

    <form method="post" action="">
        {{ formset.management_form }}
        {% for form in formset %}
            {{ form }}
        {% endfor %}
    </form>

Lorsque vous mettez le formset en forme manuellement, soyez sûr de mettre en forme le formulaire de management
comme indiqué ci-dessus. Voir :ref:`management form documentation <understanding-the-managementform>`.

Troisième facçon, vous pouvez mettre en forme chaque champ manuellement::

    <form method="post" action="">
        {{ formset.management_form }}
        {% for form in formset %}
            {% for field in form %}
                {{ field.label_tag }}: {{ field }}
            {% endfor %}
        {% endfor %}
    </form>

Si vous optez pour cette troisième méthode et que vous ne parcourez pas chaque champ avec une boucle ``{% for %}``, vous devrez mettre en forme le champ clé primaire. Par exemple, si vous mettiez en forme les champs ``name`` et ``age`` d'un modèle::

    <form method="post" action="">
        {{ formset.management_form }}
        {% for form in formset %}
            {{ form.id }}
            <ul>
                <li>{{ form.name }}</li>
                <li>{{ form.age }}</li>
            </ul>
        {% endfor %}
    </form>

Notez comment nous devons mettre ``{{ form.id }}`` explicitement en forme. Cela assure que le formset model, dans le cas d'un ``POST``, travaillera correctement.  (Cet exemple suppose une clé primaire nommée ``id``. Si vous avez explictement déclaré votre propre clé primaire, qui n'est pas nommée ``id``, soyez sûr de l'avoir mise en forme.)

.. highlight:: python

Formsets Inline
===============

Formsets Inline est une petite couche d'abstraction au-dessus des formsets model. Ils simplifient 
le travail avec des objets liés par une clé étrangère. Supposons que vous avez ces deux modèles::

    class Author(models.Model):
        name = models.CharField(max_length=100)

    class Book(models.Model):
        author = models.ForeignKey(Author)
        title = models.CharField(max_length=100)

Si vous voulez créer un formset qui vous permet l'édition de livres appartennant à un auteur en particulier, vous pouvez faire ceci::

    >>> from django.forms.models import inlineformset_factory
    >>> BookFormSet = inlineformset_factory(Author, Book)
    >>> author = Author.objects.get(name=u'Mike Royko')
    >>> formset = BookFormSet(instance=author)

.. note::
    ``inlineformset_factory`` utilise ``modelformset_factory`` et marque
    ``can_delete=True``.

.. seealso::

    :ref:`can_delete et can_order fournis manuellement <manually-rendered-can-delete-and-can-order>`.

Plus d'une clé étrangère dans le même modèle
--------------------------------------------

Si votre modèle contient plus d'une clé étrangère vers le même modèle, vous devrez résoudre l'ambiguïté manuellement en utilisant ``fk_name``. Par exemple, prenons le modèle suivant::

    class Friendship(models.Model):
        from_friend = models.ForeignKey(Friend)
        to_friend = models.ForeignKey(Friend)
        length_in_months = models.IntegerField()

Pour résoudre cela, vous pouvez utiliser ``fk_name`` vers ``inlineformset_factory``::

    >>> FriendshipFormSet = inlineformset_factory(Friend, Friendship, fk_name="from_friend")

Utiliser un formset inline dans une vue
---------------------------------------

Vous voudrez pouvoir fournir une vue permettant à l'utilisateur de modifier les objets liés d'un modèle. Voici comment faire::

    def manage_books(request, author_id):
        author = Author.objects.get(pk=author_id)
        BookInlineFormSet = inlineformset_factory(Author, Book)
        if request.method == "POST":
            formset = BookInlineFormSet(request.POST, request.FILES, instance=author)
            if formset.is_valid():
                formset.save()
                # Do something.
        else:
            formset = BookInlineFormSet(instance=author)
        return render_to_response("manage_books.html", {
            "formset": formset,
        })

Notez comment on passe ``instance`` dans les deux situations ``POST`` et ``GET``.
