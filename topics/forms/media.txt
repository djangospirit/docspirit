Form Media
==========

Pour produire un formulaire Web attrayant et simple à utiliser, il faut quelque chose de plus que du simple HTML - il faut aussi des feuilles de style CSS, et si vous voulez utiliser les widgets "Web2.0" élaborés, vous devrez aussi incorporer du JavaScript dans chaque page. Le dosage de CSS et de JavaScript requis pour chacune de vos pages dépendra des widgets qui vous y mettrez.

C'est là qu'interviennent les définitions média  de Django. Django vous permet d'associer différents fichiers de médias aux formulaires et widgets qui nécessitent ce média. Par exemple, si vous utilisez un calendrier pour mettre en forme les DateFields,
vous pouvez définier un widget Calendar personnalisé. Ce widget peut alors être associé
au CSS et JavaScript requis pour mettre en forme le calendrier. Lorsque le widget Calendrier est utilisé dans un formulaire, Django est capable d'identifier les fichiers CSS et JavaScript requis, et fournit la liste de noms de fichiers adéquats pour une inclusion facile dans votre page Web.

.. admonition:: Media et Django Admin

    L'application Django Admin définit un nombre de widgets personnalisés
    pour des calendriers, des sélections filtrées, et ainsi de suite. Ces widgets définissent
    des besoins de médias, et Django Admin utilise les widgets personnalisés
    à la place de ceux par défaut de Django. Les templates Admin n'inclueront que ces
    fichiers média requis pour produire les widgets sur les pages.

    Si vous appréciez les widgets de l'application Django Admin,
    n'hésitez pas à les utiliser dans votre propre application! Ils sont tous stockés dans
    in ``django.contrib.admin.widgets``.

.. admonition:: Which JavaScript toolkit?

    Il existe beaucoup de boites à outils JavaScript, et la plupart contiennent des widgets (comme
    des widgets calendrier) pouvant être utilisés pour améliorer votre application.
    Django a délibérement décidé de n'en privilégier aucun.
    Chaque boite à outils JavaScript a ses propres forces et faiblesses - utilisez celle qui correspond
    le mieux à vos besoins. Django est capable d'intégrer n'importe quelle boite à outils JavaScript.

Media comme définition statique
-------------------------------

La façon la plus simple de déclarer un médi& est dans une déclaration statique. Avec cette méthode,
la déclaration média est dans une classe interne. Les propriétés de la classe interne définissent les besions du média.

Voici un exemple simple::

    class CalendarWidget(forms.TextInput):
        class Media:
            css = {
                'all': ('pretty.css',)
            }
            js = ('animations.js', 'actions.js')

Ce code déclare un ``CalendarWidget``, qui se basera sur un ``TextInput``.
Chaque fois que le CalendarWidget est utilisé dans un formulaire, ce formulaire recevra l'ordre d'inclure le fichier  CSS file ``pretty.css``, et les fichiers JavaScript ``animations.js`` et ``actions.js``.

Cette déclaration statique de média est convertie à l'éxecution en propriété widget nommée ``media``. Le média d'une instance CalendarWidget peut être récupérée à travers cette propriété::

    >>> w = CalendarWidget()
    >>> print w.media
    <link href="http://media.example.com/pretty.css" type="text/css" media="all" rel="stylesheet" />
    <script type="text/javascript" src="http://media.example.com/animations.js"></script>
    <script type="text/javascript" src="http://media.example.com/actions.js"></script>

Voici la liste de toutes les options ``Media`` possibles. Il n'y en a aucune d'obligatoire.

``css``
~~~~~~~

Un dictionnaire décrivant les fichiers CSS requis différents types de sorties média.

Les valeurs de ce dictionnaire doivent être un tuple/liste de noms de fichiers. Voir
`the section on media paths`_ pour les détails sur la façon de spécifier les chemins vers les fichiers média.

.. _the section on media paths: `Chemins dans les déclarations Média`_

Les clés du dictionnaire sont les types de sorties média. Ce sont les mêmes types que ceux acceptés par les fichiers CSS dans les déclarations media: 'all', 'aural', 'braille',
'embossed', 'handheld', 'print', 'projection', 'screen', 'tty' et 'tv'. Si vous avez besoin des feuilles de styles différentes pour différents types de média, fournissez une liste de fichiers CSS pour chaque type de médium de sortie. L'exemple suivant fournit deux options CSS -- une pour les sorties écran, une autre pour l'impression::

    class Media:
        css = {
            'screen': ('pretty.css',),
            'print': ('newspaper.css',)
        }

Si un groupe de fichiers CSS sont adéquats pour de multiples types de sorties média,
le dictionnaire peut être une liste à virgule de types de sorties de médias.
Dans l'exempel suivant, les TV et les projecteurs ont les mêmes besoins média::

    class Media:
        css = {
            'screen': ('pretty.css',),
            'tv,projector': ('lo_res.css',),
            'print': ('newspaper.css',)
        }

Si cette dernière définition CSS était mise en forme, elle deviendrait ce code HTML::

    <link href="http://media.example.com/pretty.css" type="text/css" media="screen" rel="stylesheet" />
    <link href="http://media.example.com/lo_res.css" type="text/css" media="tv,projector" rel="stylesheet" />
    <link href="http://media.example.com/newspaper.css" type="text/css" media="print" rel="stylesheet" />

``js``
~~~~~~

Un tuple décrivant les fichiers JavaScript requis. Voir 
`the section on media paths`_ pour les détails sur la façons de spécifier les chemins des fichiers média.

``extend``
~~~~~~~~~~

Un booléen définissant le comportement d'héritage des déclarations média.

Par défaut, tout obket utilisant une déclaration statique de média héritera de tous les médias associés au widget parent. Cela se produit indépendamment de la façon dont le parent déclare ses besoins média. Par exemple, si nous étendons notre widget Calendar de base de l'exemple précédent::

    >>> class FancyCalendarWidget(CalendarWidget):
    ...     class Media:
    ...         css = {
    ...             'all': ('fancy.css',)
    ...         }
    ...         js = ('whizbang.js',)

    >>> w = FancyCalendarWidget()
    >>> print w.media
    <link href="http://media.example.com/pretty.css" type="text/css" media="all" rel="stylesheet" />
    <link href="http://media.example.com/fancy.css" type="text/css" media="all" rel="stylesheet" />
    <script type="text/javascript" src="http://media.example.com/animations.js"></script>
    <script type="text/javascript" src="http://media.example.com/actions.js"></script>
    <script type="text/javascript" src="http://media.example.com/whizbang.js"></script>

Les widget FancyCalendar hérite de tous les média de son widget parent. Si vous ne voulez pas  que le média hérite de cette façon, ajoutez une déclaration ``extend=False`` à la déclaration du media::

    >>> class FancyCalendarWidget(CalendarWidget):
    ...     class Media:
    ...         extend = False
    ...         css = {
    ...             'all': ('fancy.css',)
    ...         }
    ...         js = ('whizbang.js',)

    >>> w = FancyCalendarWidget()
    >>> print w.media
    <link href="http://media.example.com/fancy.css" type="text/css" media="all" rel="stylesheet" />
    <script type="text/javascript" src="http://media.example.com/whizbang.js"></script>

If you require even more control over media inheritance, define your media
using a `dynamic property`_. Dynamic properties give you complete control over
which media files are inherited, and which are not.

.. _dynamic property: `Media as a dynamic property`_

Media as a dynamic property
---------------------------

If you need to perform some more sophisticated manipulation of media
requirements, you can define the media property directly. This is done
by defining a widget property that returns an instance of ``forms.Media``.
The constructor for ``forms.Media`` accepts ``css`` and ``js`` keyword
arguments in the same format as that used in a static media definition.

For example, the static media definition for our Calendar Widget could
also be defined in a dynamic fashion::

    class CalendarWidget(forms.TextInput):
        def _media(self):
            return forms.Media(css={'all': ('pretty.css',)},
                               js=('animations.js', 'actions.js'))
        media = property(_media)

See the section on `Media objects`_ for more details on how to construct
return values for dynamic media properties.

.. _form-media-paths:

Chemins dans les déclaration Média
----------------------------------

.. versionchanged:: 1.3

Paths used to specify media can be either relative or absolute. If a path
starts with '/', 'http://' or 'https://', it will be interpreted as an absolute
path, and left as-is. All other paths will be prepended with the value of
the appropriate prefix.

As part of the introduction of the
:doc:`staticfiles app </ref/contrib/staticfiles>` two new settings were added
to refer to "static files" (images, CSS, Javascript, etc.) that are needed
to render a complete web page: :setting:`STATIC_URL` and :setting:`STATIC_ROOT`.

To find the appropriate prefix to use, Django will check if the
:setting:`STATIC_URL` setting is not ``None`` and automatically fall back
to using :setting:`MEDIA_URL`. For example, if the :setting:`MEDIA_URL` for
your site was ``'http://uploads.example.com/'`` and :setting:`STATIC_URL`
was ``None``::

    >>> class CalendarWidget(forms.TextInput):
    ...     class Media:
    ...         css = {
    ...             'all': ('/css/pretty.css',),
    ...         }
    ...         js = ('animations.js', 'http://othersite.com/actions.js')

    >>> w = CalendarWidget()
    >>> print w.media
    <link href="/css/pretty.css" type="text/css" media="all" rel="stylesheet" />
    <script type="text/javascript" src="http://uploads.example.com/animations.js"></script>
    <script type="text/javascript" src="http://othersite.com/actions.js"></script>

But if :setting:`STATIC_URL` is ``'http://static.example.com/'``::

    >>> w = CalendarWidget()
    >>> print w.media
    <link href="/css/pretty.css" type="text/css" media="all" rel="stylesheet" />
    <script type="text/javascript" src="http://static.example.com/animations.js"></script>
    <script type="text/javascript" src="http://othersite.com/actions.js"></script>


Media objects
-------------

When you interrogate the media attribute of a widget or form, the value that
is returned is a ``forms.Media`` object. As we have already seen, the string
representation of a Media object is the HTML required to include media
in the ``<head>`` block of your HTML page.

However, Media objects have some other interesting properties.

Media subsets
~~~~~~~~~~~~~

If you only want media of a particular type, you can use the subscript operator
to filter out a medium of interest. For example::

    >>> w = CalendarWidget()
    >>> print w.media
    <link href="http://media.example.com/pretty.css" type="text/css" media="all" rel="stylesheet" />
    <script type="text/javascript" src="http://media.example.com/animations.js"></script>
    <script type="text/javascript" src="http://media.example.com/actions.js"></script>

    >>> print w.media['css']
    <link href="http://media.example.com/pretty.css" type="text/css" media="all" rel="stylesheet" />

When you use the subscript operator, the value that is returned is a new
Media object -- but one that only contains the media of interest.

Combining media objects
~~~~~~~~~~~~~~~~~~~~~~~

Media objects can also be added together. When two media objects are added,
the resulting Media object contains the union of the media from both files::

    >>> class CalendarWidget(forms.TextInput):
    ...     class Media:
    ...         css = {
    ...             'all': ('pretty.css',)
    ...         }
    ...         js = ('animations.js', 'actions.js')

    >>> class OtherWidget(forms.TextInput):
    ...     class Media:
    ...         js = ('whizbang.js',)

    >>> w1 = CalendarWidget()
    >>> w2 = OtherWidget()
    >>> print w1.media + w2.media
    <link href="http://media.example.com/pretty.css" type="text/css" media="all" rel="stylesheet" />
    <script type="text/javascript" src="http://media.example.com/animations.js"></script>
    <script type="text/javascript" src="http://media.example.com/actions.js"></script>
    <script type="text/javascript" src="http://media.example.com/whizbang.js"></script>

Media on Forms
--------------

Widgets aren't the only objects that can have media definitions -- forms
can also define media. The rules for media definitions on forms are the
same as the rules for widgets: declarations can be static or dynamic;
path and inheritance rules for those declarations are exactly the same.

Regardless of whether you define a media declaration, *all* Form objects
have a media property. The default value for this property is the result
of adding the media definitions for all widgets that are part of the form::

    >>> class ContactForm(forms.Form):
    ...     date = DateField(widget=CalendarWidget)
    ...     name = CharField(max_length=40, widget=OtherWidget)

    >>> f = ContactForm()
    >>> f.media
    <link href="http://media.example.com/pretty.css" type="text/css" media="all" rel="stylesheet" />
    <script type="text/javascript" src="http://media.example.com/animations.js"></script>
    <script type="text/javascript" src="http://media.example.com/actions.js"></script>
    <script type="text/javascript" src="http://media.example.com/whizbang.js"></script>

If you want to associate additional media with a form -- for example, CSS for form
layout -- simply add a media declaration to the form::

    >>> class ContactForm(forms.Form):
    ...     date = DateField(widget=CalendarWidget)
    ...     name = CharField(max_length=40, widget=OtherWidget)
    ...
    ...     class Media:
    ...         css = {
    ...             'all': ('layout.css',)
    ...         }

    >>> f = ContactForm()
    >>> f.media
    <link href="http://media.example.com/pretty.css" type="text/css" media="all" rel="stylesheet" />
    <link href="http://media.example.com/layout.css" type="text/css" media="all" rel="stylesheet" />
    <script type="text/javascript" src="http://media.example.com/animations.js"></script>
    <script type="text/javascript" src="http://media.example.com/actions.js"></script>
    <script type="text/javascript" src="http://media.example.com/whizbang.js"></script>
