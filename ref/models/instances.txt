==========================
Instance Model : référence
==========================

.. currentmodule:: django.db.models

Ce document décrit les détails de l'API ``Model`` API. Il se base sur la matière première présentée dans les pages :doc:`Syntaxe des modèles </topics/db/models>` et :doc:`Exécuter des réquêtes </topics/db/queries>`, vous devrez peut-être en prendre connaissance avant de lire cette page.

Dans ce document, nous utiliserons le (à traduir : modèle blog ?):ref:`example Weblog models
<queryset-model-example>` présenté dans le (trad "database query guide" ?) :doc:`database query guide
</topics/db/queries>`.

Créer des objets
================

Pour créer une nouvelle instance d'un modèle, il suffit de l'instancier, tout comme vous le feriez avec n'importe quelle autre classe Python:

.. class:: Model(**kwargs)

Les mots-clé arguments sont simplement les noms des champs définis dans votre modèle. Notez qu'instancier un modèle ne touche en rien la base de données; pour qu'elle le soit, vous devez utiliser :meth:`~Model.save()`.

.. note::

    Vous pourriez petre tenté de personnaliser le modèle en surchargeant la méthode ``__init__``.
    Si vous le faites, prenez soin de ne pas modifier la signature d'appel car toute modification pourrait empecher le modèle d'être sauvegardé. Plutôt que de surcharger ``__init__``, tentez l'une de ces approches:

    1. Ajoutez une classmethod à la classe modèle::

        class Book(models.Model):
            title = models.CharField(max_length=100)

            @classmethod
            def create(cls, title):
                book = cls(title=title)
                # faire quelque chose avec le book
                return book

        book = Book.create("Pride and Prejudice")

    2. Ajoutez une méthode au gestionnaire personnalisé (cas généralement préféré)::

        class BookManager(models.Manager):
            def create_book(title):
                book = self.create(title=title)
                # faire quelque chose avec le book
                return book

        class Book(models.Model):
            title = models.CharField(max_length=100)

            objects = BookManager()

        book = Book.objects.create_book("Orgueil et Préjugés")

.. _validating-objects:

Valider ds objets
=================

.. versionadded:: 1.2

La validation d'un modèle se fait en trois étapes:

1. Valider les champs du modèle
2. Valider le modèle en tant que tel
3. Valider l'unicité des champs

Ces trois étapes sont exécutées lorsque vous appelez la méthode :meth:`~Model.full_clean()` du modèle.

Lorsque vous utilisez un :class:`~django.forms.ModelForm`, l'appel à :meth:`~django.forms.Form.is_valid()` effectuera les trois étapes de la validation pour tous les champs présents dans le formulaire. Consultez la doc :doc:`ModelForm
documentation </topics/forms/modelforms>` pour plus d'informations. Vous ne devriez appeler la méthode :meth:`~Model.full_clean()` du modèle que si vous avez prévu de gérer les erreurs de validation vous-même, ou si vous avez exclue des champs du :class:`~django.forms.ModelForm` qui demande validation.

.. method:: Model.full_clean(exclude=None)

Cette méthode appelle :meth:`Model.clean_fields()`, :meth:`Model.clean()`, et
:meth:`Model.validate_unique()`, dans cet ordre, et lève un
:exc:`~django.core.exceptions.ValidationError` qui possède un attribut ``message_dict``
contenant les erreurs des trois étapes.

L'argument facultatif ``exclude`` peut être utilisé pour fournir une liste des noms de champs pouvant être exclus de la validation et du nettoyage.
:class:`~django.forms.ModelForm` utilise cet argument pour exclure de la validation les champs non présents sur votre formulaire, puisque les erreurs levées ne peuvent être corrigées par l'utilisateur.

Notez que ``full_clean()`` *ne sera pas* appelé automatiquement lorsque vous appelez la méthode :meth:`~Model.save()` du modèle, ni après le résultat de la validation de 
:class:`~django.forms.ModelForm`. Vous devrez l'appeler manuellement lorsque vous voudrez exécuter une validation de modèle en une étape pour ceux que vous avez créés manuellement.

Exemple::

    try:
        article.full_clean()
    except ValidationError, e:
        # Faire quelque chose basé sur les erreurs contenues dans e.message_dict.
        # Les afficher à  un utilisateur, ou les gérer par le programme.

L'éxécution ``full_clean()`` de la première étape nettoie chaque champ individuel.

.. method:: Model.clean_fields(exclude=None)

Cette méthode validera tous les champs de votre modèle. L'argument facultatif ``exclude``
vous permet de passer une liste de noms de champs à exclure de la validation. Une erreur :exc:`~django.core.exceptions.ValidationError` sera levée si la validation d'un des champs échoue.

L'exécution de ``full_clean()`` en deuxième étape appelle :meth:`Model.clean()`.
Cette méthode doit être surchargée pour effectuer une validation personnalisée de votre modèle.

.. method:: Model.clean()

Cette méthode doit être utilisée pour fournir une validation de modèler personnalisée, et, le cas échéant, pour modifier des attributs de votre modèle. Par exemple, vous pourriez l'utiliser pour fournir automatiquement une valeur à un champ, ou pour effectuer une validation qui doit accèder à plus d'un champ::

    def clean(self):
        from django.core.exceptions import ValidationError
        # Ne pas autoriser de pub_date aux brouillons.
        if self.status == 'draft' and self.pub_date is not None:
            raise ValidationError('Draft entries may not have a publication date.')
        # Initialiser pub_date pour les éléments publiés, si cela n'a pas déjà été fait.
        if self.status == 'published' and self.pub_date is None:
            self.pub_date = datetime.datetime.now()

Toutes les exceptions :exc:`~django.core.exceptions.ValidationError` levées par
``Model.clean()`` seront enregistrées dans un dictionnaire avec une clé erreur, ``NON_FIELD_ERRORS``, qui est utilisé pour les erreurs rattachées au modèle global plutôt qu'à un champ spécifique::

    from django.core.exceptions import ValidationError, NON_FIELD_ERRORS
    try:
        article.full_clean()
    except ValidationError, e:
        non_field_errors = e.message_dict[NON_FIELD_ERRORS]

Enfin, ``full_clean()`` vérifiera les contraintes uniques de votre modèle.

.. method:: Model.validate_unique(exclude=None)

Cette méthode est semblable à :meth:`~Model.clean_fields`, mais elle valide toutes les contraintes d'unicité de votre modèle plutôt que les valeurs d'un champ. L'argument facultatif ``exclude``
vous permet de passer une liste de noms de champs à exclure de la validation. Une erreur :exc:`~django.core.exceptions.ValidationError` sera levée si la validation d'un des champs échoue.

Notez que si vous passez un argument ``exclude`` à ``validate_unique()``, les contraintes 
:attr:`~django.db.models.Options.unique_together` impliquant l'un des champs que vous auez fourni ne seront pas vérifiées.


Sauvarder des objets
====================

Pour sauvegarder un objet dans la base de données, appelez ``save()``:

.. method:: Model.save([force_insert=False, force_update=False, using=DEFAULT_DB_ALIAS])

.. versionadded:: 1.2
   L'argument ``using`` a été ajouté.

Si vous voulez un comportement personnalisé lors de la sauvegarde, vous pouvez surcharger cette méthode ``save()``. Voir :ref:`overriding-model-methods` pour plus de détails.

La sauvegarde de modèle comporte quelques subtilités; voir la section ci-dessous.

Auto-incrémenter les clés primaies
----------------------------------

Si un modèle a un :class:`~django.db.models.AutoField` — une clé primaire auto-incrémentée — alors la valeur auto-incrémentée sera calculée et sauvegardée comme attribut de votre objet lors du premier appel de ``save()``::

    >>> b2 = Blog(name='Cheddar Talk', tagline='Thoughts on cheese.')
    >>> b2.id     # Renvoie None, car b n'a pas encore de ID.
    >>> b2.save()
    >>> b2.id     # Renvoie l'ID de votre nouvel objet.

On ne peut pas connaître la valeur de ID avant l'appel à ``save()``, car cette valeur est calculée par la base de données, pas par Django.

Par commodité, chaque modèle a par défaut un :class:`~django.db.models.AutoField` nommé
``id`` à moins que vous ne spécifiez explicitement ``primary_key=True`` sur un champ de votre modèle. Voir la documentation de :class:`~django.db.models.AutoField` pour plus de détails.

La propriété ``pk``
~~~~~~~~~~~~~~~~~~~

.. attribute:: Model.pk

Indépendamment du fait que vous définissiez un champ clé primaire vous-même, ou que ce soit Django qui le fasse pour vous, chaque modèle a une propriété nommée ``pk``. Elle se comporte comme un attribut normal de modèle, mais il s'agit en fait d'un alias vers l'attribut qui est le champ clé primaire du modèle. Vouspouvez lire et écrire cette valeur, tout comme vous le feriez pour n'importe quel autre attribut, et il actualisera le bon champ du modèle.

Spécifier des valeurs auto-primary-key explicitement
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Si un modèle a un :class:`~django.db.models.AutoField` mais que vous voulez explicitement déclarer l'ID d'un nouvel objet lors de la sauvegarde, déclarez-le simplement avant la sauvegarde, plutôt que de laisser faire l'auto-assignation de l'ID::

    >>> b3 = Blog(id=3, name='Cheddar Talk', tagline='Thoughts on cheese.')
    >>> b3.id     # Renvoie 3.
    >>> b3.save()
    >>> b3.id     # Renvoie 3.

Si vous renseignez manuellement les valeurs de la clé primaire automatique, assurez-vous de ne pas utiliser une vaaeur de clé primaire automatique existante ! Si vous créez un nouvel objet en lui donnant une valeur de clé primaire auto qui existe déjà dans la base, Django supposera que vous changez l'enregistrement existant, au lieu d'en créer un nouveau.

Avec le blog ``'Cheddar Talk'`` précédent, cet exemple remplacera l'enregistrement antérieur de la base de données::

    b4 = Blog(id=3, name='Not Cheddar', tagline='Anything but cheese.')
    b4.save()  # Remplace le blog antérieur avec ID=3!

Voir `How Django knows to UPDATE vs. INSERT`_, ci-dessous, pour la raison de ce comportement.

Spécifier des clés primaires auto est particulièrement utile lors de sauvegardes d'objets par lots, lorsque vous êtes sûr qu'il n'y aura pas de collisions de clés primaires.

Que se passe-t-il lorsque vous sauvegardez ?
--------------------------------------------

Lorsque vous sauvegardez une objet, Django effectue les tâches suivantes:

1. **Emission d'un signal de pré-sauvegarde.** Le :doc:`signal </ref/signals>`
   :attr:`django.db.models.signals.pre_save` est émis, permettant à toute fonction écoutant ce signal d'effectuer une action personnalisée..

2. **Pré-traitement des données.** Chaque champ de l'objet est interrogé pour effectuer toutes les modifications automatiques de données que le champ pourrait avoir besoin d'exécuter..

   La plupart des champs ne pré-traitent pas — les données du champ sont laissées telles quelles. Le pré-tracitement n'est utilisé que sur les champs qui ont des comportements spéciaux. Par exemple, si votre modèle a un :class:`~django.db.models.DateField` avec
   ``auto_now=True``, la phase de de pré-traitement modifiera les données dl'objet pour s'assurer que le champ date contient la date en cours. (Notre documentation ne contient pas encore la liste des champs qui ont ce "comportement spécial")

3. **Préparer les données pour la base de données.** Chaque champ est interrogé pour fournir la valeur qu'il contient en type de donnée pouvant être écrite dans la base de données.

   La plupart des champs *n'ont pas* besoin de préparer les données. Les types de données simples, comme les entiers ou les chaînes, sont 'prêtes à être écrites' en tant qu'objet Python. Cependant, des types de connées plus complexes requièrent souvent des modifications.

   Par exemple, les champs :class:`~django.db.models.DateField` utilisent un objet
   ``datetime`` Python pour stocker les données. La base de données ne stocke pas les objets ``datetime``, la valeur de champ doit donc être convertie en une chaîne date ISO conforme pour insertion dans la base de données.

4. **Insérer les données dans la base de données.** les données, pré-traîtées, préparées, sont alors  converties en instruction SQL pour insertion dans la base de données.

5. **Emission d'un signal post-sauvegarde.** Le signal
   :attr:`django.db.models.signals.post_save` est émis, permettant à toute fonction écoutant ce signal d'effectuer des actions personnalisées.

Comment Django sait s'il faut utiliser UPDATE ou INSERT
-------------------------------------------------------

Vous avez peut-être remarqué que les objets base de données Django utilisent la même méthode ``save()`` pour la création et la modification des objets. Django élimine le besoin d'utiliser les instructions SQL ``INSERT`` ou ``UPDATE``. Spécifiquement, lorsque vous appelez ``save()``, Django suit cet algorithme:

* Si l'attribut clé primaire de l'objet est initialisé avec une valeur qui évalue à ``True`` (par exemple, une valeur qui n'est pas ``None`` ou une chaîne vide), Django exécute une requête ``SELECT`` pour déterminer s'il existe un enregistrement avec la clé primaire indiquée.
* S'il existe, Django exécute une requête ``UPDATE``.
* Si l'attribut clé primaire *n'est pas* initialisé, ou s'il l'est mais que l'enregistrement n'existe pas, Django exécute un ``INSERT``.

Le truc ici, c'est que vous devez être attentif à ne pas spécifier de valeur de clé primaire lorsque vous sauvegardez des objets nouveaux, si vous ne pouvez pas garantir que la valeur clé-primaire est inutilisée. Pour davantage sur cette nuance, voir  `Explicitly specifying
auto-primary-key values`_ ci-dessus et `Forcing an INSERT or UPDATE`_ ci-dessous.

.. _ref-models-force-insert:

Forcing an INSERT or UPDATE
~~~~~~~~~~~~~~~~~~~~~~~~~~~

In some rare circumstances, it's necessary to be able to force the
:meth:`~Model.save()` method to perform an SQL ``INSERT`` and not fall back to
doing an ``UPDATE``. Or vice-versa: update, if possible, but not insert a new
row. In these cases you can pass the ``force_insert=True`` or
``force_update=True`` parameters to the :meth:`~Model.save()` method.
Obviously, passing both parameters is an error: you cannot both insert *and*
update at the same time!

It should be very rare that you'll need to use these parameters. Django will
almost always do the right thing and trying to override that will lead to
errors that are difficult to track down. This feature is for advanced use
only.

Updating attributes based on existing fields
--------------------------------------------

Sometimes you'll need to perform a simple arithmetic task on a field, such
as incrementing or decrementing the current value. The obvious way to
achieve this is to do something like::

    >>> product = Product.objects.get(name='Venezuelan Beaver Cheese')
    >>> product.number_sold += 1
    >>> product.save()

If the old ``number_sold`` value retrieved from the database was 10, then
the value of 11 will be written back to the database.

This sequence has a standard update problem in that it contains a race
condition. If another thread of execution has already saved an updated value
after the current thread retrieved the old value, the current thread will only
save the old value plus one, rather than the new (current) value plus one.

The process can be made robust and slightly faster by expressing the update
relative to the original field value, rather than as an explicit assignment of
a new value. Django provides :ref:`F() expressions <query-expressions>` for
performing this kind of relative update. Using ``F()`` expressions, the
previous example is expressed as::

    >>> from django.db.models import F
    >>> product = Product.objects.get(name='Venezuelan Beaver Cheese')
    >>> product.number_sold = F('number_sold') + 1
    >>> product.save()

This approach doesn't use the initial value from the database. Instead, it
makes the database do the update based on whatever value is current at the time
that the :meth:`~Model.save()` is executed.

Once the object has been saved, you must reload the object in order to access
the actual value that was applied to the updated field::

    >>> product = Products.objects.get(pk=product.pk)
    >>> print product.number_sold
    42

For more details, see the documentation on :ref:`F() expressions
<query-expressions>` and their :ref:`use in update queries
<topics-db-queries-update>`.

Deleting objects
================

.. method:: Model.delete([using=DEFAULT_DB_ALIAS])

.. versionadded:: 1.2
   The ``using`` argument was added.

Issues a SQL ``DELETE`` for the object. This only deletes the object in the
database; the Python instance will still exist and will still have data in
its fields.

For more details, including how to delete objects in bulk, see
:ref:`topics-db-queries-delete`.

If you want customized deletion behavior, you can override the ``delete()``
method. See :ref:`overriding-model-methods` for more details.

.. _model-instance-methods:

Other model instance methods
============================

A few object methods have special purposes.

``__unicode__``
---------------

.. method:: Model.__unicode__()

The ``__unicode__()`` method is called whenever you call ``unicode()`` on an
object. Django uses ``unicode(obj)`` (or the related function, :meth:`str(obj)
<Model.__str__>`) in a number of places. Most notably, to display an object in
the Django admin site and as the value inserted into a template when it
displays an object. Thus, you should always return a nice, human-readable
representation of the model from the ``__unicode__()`` method.

For example::

    class Person(models.Model):
        first_name = models.CharField(max_length=50)
        last_name = models.CharField(max_length=50)

        def __unicode__(self):
            return u'%s %s' % (self.first_name, self.last_name)

If you define a ``__unicode__()`` method on your model and not a
:meth:`~Model.__str__()` method, Django will automatically provide you with a
:meth:`~Model.__str__()` that calls ``__unicode__()`` and then converts the
result correctly to a UTF-8 encoded string object. This is recommended
development practice: define only ``__unicode__()`` and let Django take care of
the conversion to string objects when required.

``__str__``
-----------

.. method:: Model.__str__()

The ``__str__()`` method is called whenever you call ``str()`` on an object. The main use for this method directly inside Django is when the ``repr()`` output of a model is displayed anywhere (for example, in debugging output).
Thus, you should return a nice, human-readable string for the object's
``__str__()``.  It isn't required to put ``__str__()`` methods everywhere if you have sensible :meth:`~Model.__unicode__()` methods.

The previous :meth:`~Model.__unicode__()` example could be similarly written
using ``__str__()`` like this::

    class Person(models.Model):
        first_name = models.CharField(max_length=50)
        last_name = models.CharField(max_length=50)

        def __str__(self):
            # Note use of django.utils.encoding.smart_str() here because
            # first_name and last_name will be unicode strings.
            return smart_str('%s %s' % (self.first_name, self.last_name))

``get_absolute_url``
--------------------

.. method:: Model.get_absolute_url()

Define a ``get_absolute_url()`` method to tell Django how to calculate the
canonical URL for an object. To callers, this method should appear to return a
string that can be used to refer to the object over HTTP.

For example::

    def get_absolute_url(self):
        return "/people/%i/" % self.id

(Whilst this code is correct and simple, it may not be the most portable way to
write this kind of method. The :func:`permalink() decorator <permalink>`,
documented below, is usually the best approach and you should read that section
before diving into code implementation.)

One place Django uses ``get_absolute_url()`` is in the admin app. If an object
defines this method, the object-editing page will have a "View on site" link
that will jump you directly to the object's public view, as given by
``get_absolute_url()``.

Similarly, a couple of other bits of Django, such as the :doc:`syndication feed
framework </ref/contrib/syndication>`, use ``get_absolute_url()`` when it is
defined. If it makes sense for your model's instances to each have a unique
URL, you should define ``get_absolute_url()``.

It's good practice to use ``get_absolute_url()`` in templates, instead of
hard-coding your objects' URLs. For example, this template code is bad::

    <!-- BAD template code. Avoid! -->
    <a href="/people/{{ object.id }}/">{{ object.name }}</a>

This template code is much better::

    <a href="{{ object.get_absolute_url }}">{{ object.name }}</a>

The logic here is that if you change the URL structure of your objects, even
for something simple such as correcting a spelling error, you don't want to
have to track down every place that the URL might be created. Specify it once,
in ``get_absolute_url()`` and have all your other code call that one place.

.. note::
    The string you return from ``get_absolute_url()`` **must** contain only
    ASCII characters (required by the URI specfication, :rfc:`2396`) and be
    URL-encoded, if necessary.

    Code and templates calling ``get_absolute_url()`` should be able to use the
    result directly without any further processing. You may wish to use the
    ``django.utils.encoding.iri_to_uri()`` function to help with this if you
    are using unicode strings containing characters outside the ASCII range at
    all.

The ``permalink`` decorator
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The way we wrote ``get_absolute_url()`` above is a slightly violation of the
DRY principle: the URL for this object is defined both in the URLconf file and
in the model.

You can decouple your models from the URLconf using the ``permalink`` decorator:

.. function:: permalink()

This decorator takes the name of a URL pattern (either a view name or a URL
pattern name) and a list of position or keyword arguments and uses the URLconf
patterns to construct the correct, full URL. It returns a string for the
correct URL, with all parameters substituted in the correct positions.

The ``permalink`` decorator is a Python-level equivalent to the :ttag:`url` template tag and a high-level wrapper for the :func:`django.core.urlresolvers.reverse()` function.

An example should make it clear how to use ``permalink()``. Suppose your URLconf
contains a line such as::

    (r'^people/(\d+)/$', 'people.views.details'),

...your model could have a :meth:`~django.db.models.Model.get_absolute_url()`
method that looked like this::

    from django.db import models

    @models.permalink
    def get_absolute_url(self):
        return ('people.views.details', [str(self.id)])

Similarly, if you had a URLconf entry that looked like::

    (r'/archive/(?P<year>\d{4})/(?P<month>\d{2})/(?P<day>\d{2})/$', archive_view)

...you could reference this using ``permalink()`` as follows::

    @models.permalink
    def get_absolute_url(self):
        return ('archive_view', (), {
            'year': self.created.year,
            'month': self.created.strftime('%m'),
            'day': self.created.strftime('%d')})

Notice that we specify an empty sequence for the second parameter in this case,
because we only want to pass keyword parameters, not positional ones.

In this way, you're associating the model's absolute path with the view that is
used to display it, without repeating the view's URL information anywhere. You
can still use the :meth:`~django.db.models.Model.get_absolute_url()` method in
templates, as before.

In some cases, such as the use of generic views or the re-use of custom views
for multiple models, specifying the view function may confuse the reverse URL
matcher (because multiple patterns point to the same view). For that case,
Django has :ref:`named URL patterns <naming-url-patterns>`. Using a named URL
pattern, it's possible to give a name to a pattern, and then reference the name
rather than the view function. A named URL pattern is defined by replacing the
pattern tuple by a call to the ``url`` function)::

    from django.conf.urls import patterns, url, include

    url(r'^people/(\d+)/$', 'blog_views.generic_detail', name='people_view'),

...and then using that name to perform the reverse URL resolution instead
of the view name::

    from django.db import models

    @models.permalink
    def get_absolute_url(self):
        return ('people_view', [str(self.id)])

More details on named URL patterns are in the :doc:`URL dispatch documentation
</topics/http/urls>`.

Extra instance methods
======================

In addition to :meth:`~Model.save()`, :meth:`~Model.delete()`, a model object
might have some of the following methods:

.. method:: Model.get_FOO_display()

For every field that has :attr:`~django.db.models.Field.choices` set, the
object will have a ``get_FOO_display()`` method, where ``FOO`` is the name of
the field. This method returns the "human-readable" value of the field.

For example::

        from django.db import models

        class Person(models.Model):
            SHIRT_SIZES = (
                (u'S', u'Small'),
                (u'M', u'Medium'),
                (u'L', u'Large'),
            )
            name = models.CharField(max_length=60)
            shirt_size = models.CharField(max_length=2, choices=SHIRT_SIZES)

    ::

        >>> p = Person(name="Fred Flintstone", shirt_size="L")
        >>> p.save()
        >>> p.shirt_size
        u'L'
        >>> p.get_shirt_size_display()
        u'Large'

.. method:: Model.get_next_by_FOO(\**kwargs)
.. method:: Model.get_previous_by_FOO(\**kwargs)

For every :class:`~django.db.models.DateField` and
:class:`~django.db.models.DateTimeField` that does not have :attr:`null=True
<django.db.models.Field.null>`, the object will have ``get_next_by_FOO()`` and
``get_previous_by_FOO()`` methods, where ``FOO`` is the name of the field. This
returns the next and previous object with respect to the date field, raising
a :exc:`~django.db.DoesNotExist` exception when appropriate.

Both methods accept optional keyword arguments, which should be in the format
described in :ref:`Field lookups <field-lookups>`.

Note that in the case of identical date values, these methods will use the
primary key as a tie-breaker. This guarantees that no records are skipped or
duplicated. That also means you cannot use those methods on unsaved objects.
